Level Loading
------------------------
Levels loaded from proc_8025615C
Jump table at 80308B98/(hd_code_data:1FFC8):

ID: JmpTable  Start   End     Name gzip    Level Name
----------------------------------------------------
 0: 802561B8  4ACC10  4B8960  chimp.raw    Simian Acres
 1: 80256194  4A5660  4ACC10  lagp.raw     Angel City
 2: 802561DC  4B8960  4BFD60  valley.raw   Outland Farm
 3: 80256200  4BFD60  4C3AC0  fact.raw     Blackridge Works
 4: 80256224  4C3AC0  4D5F90  dip.raw      Glory Crossing
 5: 80256248  4D5F90  4E2F70  beetle.raw   Shuttle Gully
 6: 8025626C  4E2F70  4E4E80  bonus1.raw   Salvage Wharf
 7: 80256290  4E4E80  4E7C00  bonus2.raw   Skyfall
 8: 802562B4  4E7C00  4E8F70  bonus3.raw   Twilight Foundry
 9: 802562D8  4E8F70  4F5C10  level9.raw   Crystal Rift
10: 802562FC  4F5C10  500520  level10.raw  Argent Towers
11: 80256320  500520  507E80  level11.raw  Skerries
12: 80256344  507E80  511340  level12.raw  Diamond Sands
13: 80256368  511340  523080  level13.raw  Ebony Coast
14: 8025638C  523080  52CD00  level14.raw  Oyster Harbor
15: 802563B0  52CD00  532700  level15.raw  Carrick Point
16: 802563D4  532700  53E9B0  level16.raw  Havoc District
17: 802563F8  53E9B0  54A820  level17.raw  Ironstone Mine
18: 8025641C  54A820  552DE0  level18.raw  Beeton Tracks
19: 80256440  552DE0  555000  level19.raw  J-Bomb
20: 80256464  555000  560E90  level20.raw  Jade Plateau
21: 80256488  560E90  5652D0  level21.raw  Marine Quarter
22: 802564AC  5652D0  56F3F0  level22.raw  Cooter Creek
23: 802564D0  56F3F0  5721E0  level23.raw  Gibbon's Gate
24: 802564F4  5721E0  5736E0  level24.raw  Baboon Catacomb
25: 80256518  5736E0  57A2C0  level25.raw  Sleek Streets
26: 8025653C  57A2C0  580B60  level26.raw  Obsidian Mile
27: 80256560  580B60  588CE0  level27.raw  Corvine Bluff
28: 80256584  588CE0  58BE80  level28.raw  Sideswipe
29: 802565A8  58BE80  597B80  level29.raw  Echo Marches
30: 802565CC  597B80  59B7D0  level30.raw  Kipling Plant
31: 802565F0  59B7D0  5A5840  level31.raw  Falchion Field
32: 80256614  5A5840  5B0B10  level32.raw  Morgan Hall
33: 80256638  5B0B10  5B5A30  level33.raw  Tempest City
34: 8025665C  5B5A30  5B8BB0  level34.raw  Orion Plaza
35: 80256680  5B8BB0  5C4C80  level35.raw  Glander's Ranch
36: 802566A4  5C4C80  5CA9C0  level36.raw  Dagger Pass
37: 802566C8  5CA9C0  5CCF50  level37.raw  Geode Square
38: 802566EC  5CCF50  5D1060  level38.raw  Shuttle Island
39: 80256710  5D1060  5DC830  level39.raw  Mica Park
40: 80256734  5DC830  5E6EE0  level40.raw  Moon
41: 80256758  5E6EE0  5EC800  level41.raw  Cobalt Quarry
42: 8025677C  5EC800  5F3A80  level42.raw  Moraine Chase
43: 802567A0  5F3A80  6014B0  level43.raw  Mercury
44: 802567C4  6014B0  60A710  level44.raw  Venus
45: 802567E8  60A710  613AA0  level45.raw  Mars
46: 8025680C  613AA0  61DD70  level46.raw  Neptune
47: 80256830  61DD70  621AF0  level47.raw  CMO Intro
48: 80256854  621AF0  6269E0  level48.raw  Silver Junction
49: 80256878  6269E0  630C30  level49.raw  End Sequence
50: 8025689C  630C30  635700  level50.raw  Shuttle Clear
51: 802568C0  635700  63CA10  level51.raw  Dark Heartland
52: 802568E4  63CA10  641F30  level52.raw  Magma Peak
53: 80256908  641F30  644810  level53.raw  Thunderfist
54: 8025692C  644810  646080  level54.raw  Saline Watch
55: 80256950  646080  647550  level55.raw  Backlash
56: 80256974  647550  654FC0  level56.raw  Bison Ridge
57: 80256998  654FC0  660950  level57.raw  Ember Hamlet
58: 802569BC  660950  665F80  level58.raw  Cromlech Court
59: 802569E0  665F80  66C900  level59.raw  Lizard Island

// load level
// A0 = level ID number
// A1 = pointer to something (pool?) passed directly to proc_8028B4C4
// A2 = word pointer to store level length (end - start)
proc_8025615C(A0, A1, A2)

// some sort of DMA function
// A0 = start of block
// A1 = passed directly to proc_8028B4C4
// A2 = pointer to level length (end - start)
// A3 = 0xC
// SP10 = 0xA
// SP14 = 1
proc_8028B4C4(A0, A1, A2, A3, SP10, SP14)

Simian Acres / chimp.raw
------------------------
Header
00: 0003 0006 05DC 05DC 0004 0007 04B0 04B0 
10: 0003 0006 05DC 05DC FFFFFFFC  00000001 
20: 00010258  00010258  00010258  00010258 
30: 00010258  0001B6B4  0001B90C  0001B924 
40: 0001B924  0001BA14  0001BA46  0001BA8E 
50: 0001BA96  0001BABA  0001BAC4  0001BAC4 
60: 0001BCD8  0001BD24  0001BD24  0001BD9D 
70: 0001E6E3  0001E72C  0001F420  0001F470 
80: 0001F948  00029E18  0001F420  0001F468 
90: 00029C88  00029D18  00029DA0  00029DA8 
A0: 0001F41C  0001F41C  0001F41C  0001F41C 
B0: 0001F41C  0001F41C  0001F41C  0001F41C 
C0: 0001F41C  0000 0000

Copied to 80081E70

Reads of 80081E70
80298A20: LBU T4, 0x0000(T8) - before full level loaded?

802A2DC4: LHU T1, 0x0000(T0)
802A2DCC: LHU T1, 0x0002(T0)

802A4730: LHU S2, 0x0000(A0)
802A4734: LHU S3, 0x0002(A0)

802A480C: LHU S4, 0x0000(A0)

0x80364458: display list
*0x80364458 = t0 + 0xC8;

struct
{
   u16 h00; // unsigned half, stored to 0x803BE714
            // stored to (*0x803C2B88)->h4
            // passed through s4
   u16 h02; // unsigned half, stored to 0x803BE716
            // stored to (*0x803C2B88)->h6
   u16 h04; // unsigned half, << 5, stored to word 0x803BE70C
            // passed through s7
   u16 h06; // unsigned half, << 5, stored to word 0x803BE710
            // passed through t8
   u16 h08; // unsigned half, stored to 0x803BE720
   u16 h0A; // unsigned half, stored to 0x803BE722
            // handled in proc_802A4464
   u16 h0C; // unsigned half, << 5, stored to word 0x803BE718
   u16 h0E; // unsigned half, << 5, stored to word 0x803BE71C
   u16 h10; // unsigned half, stored to 0x803BE72C
            // handled in proc_802A3D54, proc_802A3DF8
   u16 h12; // unsigned half, stored to 0x803BE72E
            // handled in proc_802A3D54, proc_802A3DF8
   u16 h14; // unsigned half, << 5, stored to word 0x803BE724
   u16 h16; // unsigned half, << 5, stored to word 0x803BE728
   s32 w18; // signed word, converted to float stored in 0x803EBBF0
   u32 w1C; // word, store to byte 0x803BE739
   u32 w20; // passed through a0 to proc_8028C190
   u32 w24; // start of ?, added to t0, stored to 0x803BDAF4
            // passed through a1 to proc_8028C190
   u32 w28; // end of ?,   added to t0, stored to 0x803BDAF8
            // handled in proc_802CEAA0
   u32 w2C; // handled in proc_802CEAA0
   u32 w30; // handled in proc_802A4464
   u32 w34; // RDUs start: added to s0, passed through a0 to proc_8026FBB0, 6-bytes each
   u32 w38; // RDUs end:   added to s0, passed through a1 to proc_8026FBB0
            //             added to t0, passed through a0 to proc_8028D4C0
   u32 w3C; // added to s0, passed through a1 to proc_8028D4C0
            // added to s0, passed through a0 to proc_8028FDA0
   u32 w40; // added to s0, passed through a1 to proc_8028FDA0
            // maybe handled by proc_802A5510
   u32 w44; // maybe handled by proc_802A5510
   u32 w48; // added to a0, passed through s6 to proc_802A484C->proc_802A49A8
   u32 w4C; // added to t0=p, *0x803BE730 = p->h00;
            //                *0x803BE734 = p->h02;
            //                *0x803BE732 = p->h04;
            //                *0x803BE736 = p->h06;
   u32 w50; // added to t0, stored to 0x803BE6F8
            // handled by proc_802A350C
   u32 w54; // handled by proc_802A350C, proc_802A303C, proc_802A3134
   u32 w58; // added to t0, stored to 0x803BE6FC
   u32 w5C; // added to t0, stored to 0x803BE700
   u32 w60; // handled in proc_802A2C54
   u32 w64; // handled in proc_802A2C54, proc_802A3E9C
   u32 w68; // handled in proc_802A3E9C, proc_802A3F80
   u32 w6C; // handled in proc_802A3F80, proc_802A3D54
   u32 w70; // handled in proc_802A3DF8
   u32 w74; // handled in proc_802A1A9C
   u32 w78; // added to t0, s0 to proc_802A08E4
            // handled in proc_802A1C88
   u32 w84; // added to t0, s1 to proc_802A08E4
            // handled in proc_802A1C88
   u32 w90; // handled in proc_802A1C88
   u32 w94; // handled in proc_802A1C88
   u32 w98; // handled in proc_802A1C88
   u32 w9C; // handled in proc_802A1C88
}

802A2DC4/802A2DCC
---------------------------------------------------------
Thread3/proc_80285814 -> proc_80256A34 -> proc_802A1674 -> proc_802A2D68

proc_802A2D68(T0:8009F5F0)

802A4730/802A4734:
------------------------------------------
Thread3 -> proc_802475D8 -> proc_8024B8F4 -> proc_802A467C -> proc_802A470C

proc_802A470C(A0:)

----------------------------------------------------------------
Offset 0x24/0x28: TODO empty in chimp

Added to offset of start of level, stored to 0x803BDAF4/0x803BDAF8
proc_802AC0BC() - records 0x14 bytes each (9 halfwords), each << 5

----------------------------------------------------------------
Offset 0x2C/0x30: TODO empty in chimp

proc_802A1C20() - records 12 bytes each
w0: passed through 16 to proc_802A0CFC
u8: skip if 0xFF
9-0xb: ??

----------------------------------------------------------------
Offset 0x30/0x34: TODO

looks like a linked list of offsets

proc_802A4464()
t1 = t0->h08;
t2 = t0->h0A;
t5 = t0->w30;
t1 = t1 * t2;
t3 = 0x803BDB10;
t6 = t5 = t5 + t0;
while (t1 != 0) {
   t6 += 4;
   *t3 = t6;
   at = t6;
   t6 = lwl(-4, at) / lwr(-1, at);
   t1--;
   t3 += 4;
}
t6 += t5;
t6 += 4;
*t3 = t6;

chimp: 010258-01B6B4

----------------------------------------------------------------
Offset 0x34/0x38: RDUs

[XX XX] [YY YY] [ZZ ZZ]
X,Y,Z: position of RDU

proc_802A1674() -> proc_8026FBB0(A0, A1)

  six halfwords copied out to struct array at 801DC508
  *0x8036bed8 + (halfword at 0x8036eb90 * 0x88) 

chimp: 01B6B4-01B90C
07E2 0013 0AC8 
07A6 0013 0AC8 
07DD 0016 0A4B 
07A1 0016 0A4B 
079B 0017 09DA 
...

----------------------------------------------------------------
Offset 0x38/0x3C: TNT crates, 12 bytes

[XX XX] [YY YY] [ZZ ZZ] [B6] [B7] [H8 H8] [HA HA]
X,Y,Z: position of TNT crate
B6:    TODO stored to byte (T6 + 0x8039B07E)
B7:    TODO time? (B7 * 60) stored to halfword (T9 + 0x8039B080)
H8:    TODO halfword stored to (T1 + 0x8039B08A)
HA:    TODO halfword stored to (T3 + 0x8039B08C)

proc_8028D4C0(A0, A1)

chimp: 01B90C-01B924
08B3 0012 0B78 00 05 0001 0834 
097D 0012 0D82 00 05 0001 0834

----------------------------------------------------------------
Offset 0x3C/0x40: TODO empty in chimp

----------------------------------------------------------------
Offset 0x40/0x44: bounding boxes (TODO terrain?)

[X1 X1] [Z1 Z1] [X2 X2] [Z2 Z2] [TT TT]
X1,Z1: lower X,Z of box
X2,Z2: upper X,Z of box
T:     TODO type?

proc_802A5510() {
   t2 = *0x803643E0;
   t3 = *0x803643E8;
   t1 = a0 + *(a0 + 0x40);
   t5 = a0 + *(a0 + 0x44);
   t6 = -1;
   t2 >>= 5;
   t3 >>= 5;
   while (t1 != t5) {
      t4 = *(u16*)(0 + t1);
      if (t2 >= t4) {
         t4 = *(u16*)(2 + t1);
         if (t3 >= t4) {
            t4 = *(u16*)(4 + t1);
            if (t4 >= t2) {
               t4 = *(u16*)(6 + t1);
               if (t4 >= t3) {
                  v0 = *(u16*)(8 + t1);
                  if (v0 >= t6) {
                     t6 = v0;
                  }
               }
            }
         }
      }
      t1 += 10;
   }
   if (at == 0xBB8) {
      *(u8*)0x80364411 = 1;
   } else {
      t1 = *(u16*)(0x80364450);
      t6 <<= 5;
      t6 += t1;
      *(u16*)0x8036444E = t6;
      *(u8*)0x80364411 = 0;
   }
}

chimp: 01B924-01BA14

----------------------------------------------------------------
Offset 0x44/0x48: bounding boxes?

[X1 X1] [Z1 Z1] [X2 X2] [Z2 Z2] [TT TT]
X1,Z1: lower X,Z of box
X2,Z2: upper X,Z of box
T:     TODO type?

proc_802A5604()

chimp: 01BA14-01BA46

----------------------------------------------------------------
Offset 0x48/0x4C: u32s?

TODO

chimp: 01BA46-01BA8E 
000000B6 000000B6 000000D5 000000D5 
000000D2 000000EC 000000F2 00000073 
00000101 000000F2 000000B6 000000E9 
000000B6 000000B6 000000E9 00000000 
00000062 00000062

----------------------------------------------------------------
Offset 0x4C: level bounds?

[X1 X1] [Z1 Z1] [X2 X2] [Z2 Z2]
two points X1,Z1 and X2,Z2

set in proc_802A2D68() {
   ...
   *0x803BE730 = *(0 + t1);
   *0x803BE734 = *(2 + t1);
   *0x803BE732 = *(4 + t1);
   *0x803BE736 = *(6 + t1);
   ...
}

compared in proc_802A8CCC() {
  if ((t2 >= *0x803be730 && t2 <= *0x803be732) &&
      (t3 >= *0x803be734 && t3 <= *0x803be736)) {
      ...
   }
}

chimp: 01BA8E
009E 011B 10B9 1FA8

----------------------------------------------------------------
Offset 0x50: vehicles
records 9 bytes each

proc_802A350C() -> proc_802A396C(T3=id)

[TT] [XX XX] [YY YY] [ZZ ZZ] [BB BB]
T:     vehicle type (see vehicles)
X,Y,Z: starting position of vehicle
B:     TODO stored in s1 and not used?

chimp: 01BA96-01BABA
00 08C0 008C 0801 0000 // player
04 08C0 008C 0801 002D // bulldozer
07 073C 0014 0B01 0400 // train
08 0685 0014 0AFC 0400 // hotrod

----------------------------------------------------------------
Offset 0x54: missile carrier settings

proc_802A303C()

[SS] [XX XX] [ZZ ZZ] [AA AA] [BB BB]
S:   speed
X,Z: X,Z start position
A:   angle (0 is all positive Z)
B:   TODO

chimp: 01BABA
1C 07BC 07E2 0000 0BB8 00

----------------------------------------------------------------
Offset 0x58: empty in chimp
TODO

----------------------------------------------------------------
Offset 0x5C: buildings?
records 14 bytes

proc_802A1D54()

[XX XX] [YY YY] [ZZ ZZ] [67 67] [88] [99] [AB AB] [CD CD]
X,Y,Z: position of object
67:    TODO passed to proc_802A2A98 through t3
8:     TODO passed to proc_802A21AC through s0
9:     TODO stored to t4->b6
AB:    TODO stored to t4->hE
CD:    TODO passed to proc_802A21AC through t9

chimp: 01BAC4-01BCD8
07E0 0014 0AEA 001E 00 00 0000 0000 
07E0 0014 0B1C 001E 00 00 0000 0000 
07A7 0014 0AEA 001E 00 00 0000 0000 
07A7 0014 0B1C 001E 00 00 0000 0000 
06D3 0012 0B8E 0020 00 04 0000 0000 
0777 0012 0B1F 0021 00 00 0000 0000 
07E1 0012 0CA2 0023 01 03 0000 0000 
080D 0012 0C99 0024 00 00 0000 0000 
0814 0012 0C78 0025 00 00 0000 0000 
0873 0012 0D77 0026 00 00 0000 0000 
087B 0012 0C8E 0027 00 00 0000 0000 
07A4 0012 0DB5 002A 01 00 0000 0000 
0798 0012 0D39 002B 00 00 0000 0000 
078F 0012 0E8A 002C 01 04 0000 0000 
0724 0014 0ECD 002D 00 00 0000 0000 
067B 0013 0E4F 0030 00 00 0000 0000 
097D 0012 0DD7 0031 00 03 0000 0000 
0632 0012 0F28 0039 00 03 0000 0000 
080E 000E 0F91 003E 01 00 0000 0000 
078F 0012 0F0F 0040 00 00 0000 0000 
08C6 0012 0F26 0041 00 00 0000 0000 
0921 0012 0F49 0042 00 00 0000 0000 
0924 0012 105B 0043 00 00 0000 0000 
090B 0011 0F0B 0022 00 00 0000 0000 
0928 000F 103F 0044 00 00 0000 0000 
08E1 000F 0FF9 0045 00 00 0000 0000 
07FA 0012 11C6 004E 01 00 0000 0000 
076E 0012 12E7 004F 01 03 0000 0000 
07A4 0012 12E7 0050 00 00 0000 0000 
084E 0012 1161 0053 00 00 0000 0000 
0846 0010 1117 0054 00 00 0000 0000 
07D6 0012 1120 0055 00 00 0000 0000 
07DC 0012 1108 0056 01 00 0000 0000 
0727 0012 1041 0057 00 00 0000 0000 
0718 0010 10CF 0058 00 00 0000 0000 
073B 0012 10F2 0059 00 00 0000 0000 
06F2 0011 118B 0038 00 00 0000 0000 
080E 000E 0F91 0110 01 00 0000 0000

----------------------------------------------------------------
Offset 0x60: TODO

first byte stored to 0x80364a6e
variable length records after that

[AA AA] [BB BB] [CC CC] [DD DD] [EE] [FF] [**] [GG] [HH]

A: TODO u16 << 5, stored as word to (0 + t3)
B: TODO u16 << 5, stored as word to (4 + t3)
C: TODO u16 << 5, stored as word to (8 + t3)
D: TODO u16 << 5, stored as word to (C + t3)
E: TODO stored to (0x10 + t3)
F: TODO stored to (0x13 + t3), used as count for next bytes
*: TODO 'F' number of bytes, stored to t5
G: TODO stored to (0x11 + t3)
H: TODO stored to (0x14 + t3)
1 stored to (0x12 + t3)

proc_802A2C54()
t3 = 0x803BDFD8
t5 = t3 + 0x15

chimp: 01BCD8-01BD24
FF
07B9 003A 083A 002D 01 [03 04 08 FF] 00 96 
07D5 0046 083A 002D 01 [03 04 08 FF] 00 96 
07F3 0053 083A 002D 01 [03 04 08 FF] 00 96 
079B 0046 083A 002D 01 [03 04 08 FF] 00 96 
077D 0053 083A 002D 01 [03 04 08 FF] 00 96

----------------------------------------------------------------
Offset 0x64: TODO empty in chimp

----------------------------------------------------------------
Offset 0x68: train platform and stopping zone

[B0] [B1]
[B2] {[X1 X1] [Z1 Z1] [X2 X2] [Z2 Z2] [X3 X3] [Z3 Z3]}
[WW WW WW WW]
[AA] {[H0 H0] [H2 H2] [H4 H4] [H6 H6] [H8 H8] [HA HA] [HC HC] [HE HE] [HG HG] [HI HI] [BK]}
[CC] {[BZ]}
B0: TODO stored to T3->bC4
B1: if non-zero, skip B2 (TODO: does something else)
B2: count of 6 int16s to follow, stored to T3->bC6
X,Z[1-3]: valid stopping zone (smiley face): constructed by 'B2' # triangles
W: TODO stored to T6
A: count of records to follow, stored to T3->bC7, handled by proc_802A41B0()
H0-HI: struct of 10 halfwords and 1 byte (0x15 bytes) ('A' count of these)
BK: TODO stored to s0, passed through v0 to proc_802A4168
C: count of bytes to follow
BZ: 'C' number of bytes

proc_802A3F80()

chimp: 01BD24-01BD9D
07 00
02 
{097B 0B0A 09B7 0B0A 09B7 0AF6}
{09B7 0AF6 097B 0AF6 097B 0B0A}
0000B5F4
04
{0889 002B 0B1A 0948 002B 0B1A 0948 0011 0B1A 07FE 01}
{0889 002B 0B1A 0948 0011 0B1A 0889 0011 0B1A 07FE 02} 
{0889 0012 0AE8 0948 0012 0AE8 0948 002C 0AE8 07FF 03}
{0889 0012 0AE8 0948 002C 0AE8 0889 002C 0AE8 07FF 04}
04
{01} {02} {03} {04}

----------------------------------------------------------------
Offset 0x6C: TODO collision?

Number of entries = t0->h10 * t0->h12

{[OO OO OO OO] N * {0x14 bytes [BB] [CC]}}
O: end offset current, added to T1, compared with T5 inner loop
B: passed through T7 to proc_802A41B0
C: stored to T4

proc_802A3D54() -> proc_802A41B0()

chimp: 01BD9D-01E6E3
0000010C
03FA 008C 0596 03FA 00B6 0596 03FA 00B6 07EE 0BFF 00 00 
03FA 008C 0596 03FA 00B6 07EE 03FA 008C 07EE 0BFF 00 00 
03FA 00F0 0596 03FA 008C 0596 0494 008C 0590 0816 00 00 
03FA 00F0 0596 0494 008C 0590 0494 00BE 0590 0816 00 00 
0494 008C 0590 052E 008C 058B 0494 00BE 0590 0816 00 00 
03FA 00F0 0596 0494 00BE 0590 0494 00F0 0590 0816 00 00 
0494 00BE 0590 052E 008C 058B 052E 00F0 058B 0816 00 00 
0494 00BE 0590 052E 00F0 058B 0494 00F0 0590 0816 00 00 
052E 00F0 058B 052E 008C 058B 05B3 008C 0586 0815 00 00 
052E 00F0 058B 05B3 008C 0586 05BB 00F0 0585 0819 00 00 
0637 008C 0582 0647 00F0 0580 05BB 00F0 0585 0819 00 00 
05B3 008C 0586 0637 008C 0582 05BB 00F0 0585 0815 00 00
000003BA 
0B66 0000 0852 0B66 015B 0852 0B66 015B 0596 0BFE 01 00 
0B66 0000 0852 0B66 015B 0596 0B66 0000 0596 0BFE 01 00 
07D8 003E 0586 0839 008C 056E 0813 00F0 056E 0879 00 00 
0813 00F0 056E 0839 008C 056E 08BD 008C 056E 07FF 00 00 
0813 00F0 056E 08BD 008C 056E 08B3 00F0 056D 0801 00 00 
...

----------------------------------------------------------------
Offset 0x70: TODO similar to 0x6C, except chimp doesn't have any values

Number of entries = t0->h10 * t0->h12

[OO OO OO OO] N * {0x14 bytes [BB] [CC]}}
O: end offset current, added to T1, compared with T5 inner loop
B: passed through T7 to proc_802A41B0
C: stored to T4

proc_802A3DF8()

chimp: 01E6E3-01E72C
00000004
00000008 
0000000C 
00000010 
00000014 
00000018 
0000001C 
00000020 
00000024 
00000028 
0000002C 
00000030 
00000034 
00000038 
0000003C 
00000040 
00000044 
00000048 

----------------------------------------------------------------
Offset 0x74: 

[NN NN NN NN] {[EE EE] ... [CC CC CC CC] {[H0 H0] [H2 H2] [H4 H4] [H6 H6] [H8 H8] [HA HA] [HC HC] [HE HE] [HG HG] [BI] ...}}
N: number of structs to allocate
E: if -1, last set
... TODO
C: number of 0x44 byte structs in this set
H0-HG: int16 stored in allocated structs through T3
BI: u8 stored in allocated struct through T3
...: TODO

proc_802A1A9C()
initializes 'N' structs each of length 0x40

chimp: 01E72C-01F420
000001C0
FFFF 
08 32 08 5C 07 2B 08 5C 07 2B 08 10 08 32 08 10 00 07 00 00 00 40 00 80 00 C0 01 00 01 40 01 80 FF FF FF FF FF FF 
00000030 
072B 00BD 0814 072B 00BD 0860 074C 00BA 0814 02 00 F5 FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 F5 FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
072B 00BD 0860 074C 00BA 0860 074C 00BA 0814 02 00 F5 FF FF FF 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
074C 00BA 0860 076C 00B6 0814 074C 00BA 0814 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 
074C 00BA 0860 076C 00B6 0860 076C 00B6 0814 02 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 
076C 00B6 0860 078D 00B4 0814 076C 00B6 0814 02 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 40 00 00 00 00 00 00 00 00 00 00 00 00 
...

----------------------------------------------------------------
Offset 0x78/0x84: ?

Added to offset of start of level, passed as s0/s1 to proc_802A08E4
proc_802A08E4() - records 8 bytes, used as 2 words
s3 = *(0x803B8D40);
s5 = *(0x803B8D44);
do {
  w0 = read_u32_be(s0);
  s0 += 8;
} while (((w0 & 0xFF000000) >> 24) == 0xFD);
w1 = read_u32_be(s0-4);
s4 = 0x803B8570;
while (w1 != *s4 && s3 != s4) {
   s4 += 8;
}